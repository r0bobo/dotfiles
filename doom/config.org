#+TITLE: Config
#+AUTHOR: Dean Lindqvist Todevski
#+EMAIL: dean.todevski@gmail.com
#+LANGUAGE: en
#+STARTUP: inlineimages
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no

* Table of Contents :TOC_3_gh:
:PROPERTIES:
:VISIBILITY: children
:END:
- [[#configuration][Configuration]]
  - [[#header][Header]]
  - [[#functions][Functions]]
  - [[#personal-info][Personal Info]]
  - [[#general][General]]
  - [[#global-keymaps][Global Keymaps]]
  - [[#dired][Dired]]
  - [[#projectile][Projectile]]
  - [[#ui][UI]]
  - [[#pretty-code][Pretty Code]]
  - [[#org-mode][Org-Mode]]
    - [[#literate-calc-mode][Literate calc mode]]
    - [[#capture-templates][Capture Templates]]
  - [[#ansible][Ansible]]
    - [[#documentation][Documentation]]
    - [[#activation][Activation]]
  - [[#chezmoi][Chezmoi]]
  - [[#systemd][Systemd]]
  - [[#magit][Magit]]
  - [[#lookup][Lookup]]
  - [[#company][Company]]
  - [[#jq][Jq]]
  - [[#custom][Custom]]
    - [[#functions-1][Functions]]

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:
** Header
#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

** Functions
#+BEGIN_SRC elisp
(defun dean-filter-existing-directories (&rest paths)
  "Output directories that exists."
  (let (existing-paths)
    (dolist (path paths existing-paths)
        (when (file-directory-p (expand-file-name path))
          (setq existing-paths (cons path existing-paths))))))
#+END_SRC

** Personal Info
#+BEGIN_SRC elisp
(setq! user-full-name "Dean Lindqvist Todevski"
      user-mail-address "dean.todevski@gmail.com")
#+END_SRC

** General
Change localleader to ~,~
#+BEGIN_SRC elisp
(setq! doom-localleader-key ",")
#+END_SRC

Shorten which-key popup delay
#+BEGIN_SRC elisp
(use-package! which-key
  :config
  (setq! which-key-idle-delay 0.5))
#+END_SRC

Authsources are used in for example Forge
#+BEGIN_SRC elisp
(setq! auth-sources '("~/.authinfo"))
#+END_SRC

Repeat searches with snipe or ~f/t~ upon pressing the key again.
#+BEGIN_SRC elisp
(use-package! evil-snipe
  :config
  (setq! evil-snipe-repeat-keys t)
  )
#+END_SRC

Switch to the new window after splitting
#+BEGIN_SRC elisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+END_SRC

** Global Keymaps

#+BEGIN_SRC elisp
(map!
 :leader
 :desc "Search in project" "/" #'+default/search-project
 :desc "Doom dashboard" "b h" #'+doom-dashboard/open

 :prefix "o"
 :desc "Undo tree" "u" 'undo-tree-visualize
 :desc "Font Size" "z" #'+hydra/text-zoom/body

 :prefix ("d" . "dean")
 :desc "Cheatsheet" "c" 'dean/cheatsheet
 :desc "Doom Config" "d" 'dean/doom-config
 :desc "Sort lines" "s" 'sort-lines
 )
#+END_SRC

Go to last changes hydra
#+BEGIN_SRC elisp
(defhydra hydra-goto-chg (:timeout 2)
  "goto-chg"
  (";" goto-last-change "goto-last-change")
  ("," goto-last-change-reverse "goto-last-change-reverse")
  ("i" goto-last-change-reverse "goto-last-change-reverse")
  )

(map! :n "g;" 'hydra-goto-chg/goto-last-change)
#+END_SRC

** Dired
#+BEGIN_SRC elisp
(map! :map dired-mode-map
      :localleader
      :desc "Edit filenames" "e" #'wdired-change-to-wdired-mode)
#+END_SRC

** Projectile
Add paths to =projectile-project-search-path= if they exists.
Projecile does not seem to like it if directories do not.
#+BEGIN_SRC elisp
(use-package! projectile
  :config
  (setq! projectile-project-search-path
         (dean-filter-existing-directories
          "~/src/" "~/projects/" "/projects/services")))
#+END_SRC

** UI
#+BEGIN_SRC elisp
(setq! doom-font (font-spec :family "Source Code Pro" :size 14)
      doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 14)
      doom-unicode-font (font-spec :family "Source Code Pro" :size 14)
      doom-big-font (font-spec :family "Source Code Pro" :size 26))

(setq! doom-theme 'doom-vibrant
      display-line-numbers-type t)
#+END_SRC

** Pretty Code
#+BEGIN_SRC elisp
(setq! +ligatures-in-modes '(org-mode)
       +ligatures-extras-in-modes '(org-mode))
#+END_SRC

** Org-Mode
#+BEGIN_SRC elisp
(setq! org-directory "~/org/")

(map! :map org-mode-map
      :localleader
      "=" #'org-babel-tangle)
#+END_SRC

*** Literate calc mode
#+BEGIN_SRC elisp
(add-hook 'org-mode-hook
          'literate-calc-minor-mode)
#+END_SRC

*** Capture Templates
#+BEGIN_SRC elisp
(after! org
  (add-to-list 'org-capture-templates
               '("l" "Link" entry
                 (file+headline "links.org" "New Links")
                 "* %(org-cliplink-capture)\n%?\n %i\n"
                 :prepend t :kill-buffer t)))

(after! org
  (add-to-list 'org-capture-templates
               '("t" "Personal todo" entry
                 (file+headline +org-capture-todo-file "Todos")
                 "* TODO %?\n%i\n%a" :prepend t)))
#+END_SRC

** Ansible
*** Documentation
#+BEGIN_SRC elisp
(after! ansible-doc
  (set-evil-initial-state! '(ansible-doc-module-mode) 'normal))

(set-popup-rule! "^\\*ansible-doc"
  :height 0.4 :quit t :select t :ttl t)

(set-lookup-handlers! 'ansible-mode
  :documentation #'ansible-doc)
#+END_SRC

*** Activation
Mode enabled based on filename regex taken from [[https://github.com/syl20bnr/spacemacs/blob/develop/layers/%2Btools/ansible/config.el#L19][Spacemacs]].

#+BEGIN_SRC elisp
(def-project-mode! +ansible-yaml-mode
  :modes '(yaml-mode)
  :add-hooks '(ansible ansible-auto-decrypt-encrypt ansible-doc-mode)
  :match "/\\(main\\|site\\|encrypted\\|\\(\\(roles\\|tasks\\|handlers\\|vars\\|defaults\\|meta\\|group_vars\\|host_vars\\)/.+\\)\\)\\.ya?ml$")
#+END_SRC

** Chezmoi
#+BEGIN_SRC elisp
(use-package! chezmoi
    :commands (chezmoi|diff chezmoi|ediff chezmoi|find chezmoi|magit-status chezmoi|write)
    )
#+END_SRC

** Systemd
#+BEGIN_SRC elisp
(map! :map systemd-mode-map
      :localleader
      "d" #'systemd-doc-directives
      "h" #'systemd-doc-open)
#+END_SRC

** Magit
#+BEGIN_SRC elisp
(setq! magit-repository-directories
      '(("~/src" . 2)
        ("~/projects" . 2)))
#+END_SRC

Setup =git.todevski.com= as a Gitlab server for remote browsing.
#+BEGIN_SRC elisp
(use-package! browse-at-remote
  :config
  (add-to-list 'browse-at-remote-remote-type-domains
               '("git.todevski.com" . "gitlab")))
#+END_SRC

** Lookup
Update list of lookup urls
#+BEGIN_SRC elisp
(add-to-list '+lookup-provider-url-alist
             '("Melpa"       "https://melpa.org/#/?q=%s")
             '("go.dev"      "https://pkg.go.dev/search?q=%s"))
#+END_SRC

** Company
#+BEGIN_SRC elisp
(map! :map company-active-map
      "<return>" #'company-complete-selection)
#+END_SRC

** Jq
#+BEGIN_SRC elisp
(use-package! jq-mode
  :mode ("\\.jq" . jq-mode))
#+END_SRC

** Custom
*** Functions
#+BEGIN_SRC elisp
(defun dean/doom-config (&optional initial-input)
  "Search Doom private config and jump to a heading."
  (interactive)
  (doom-completing-read-org-headings
   "Config: " (list (concat doom-private-dir "config.org"))
   2 nil initial-input))

(defun dean/cheatsheet (&optional initial-input)
  "Search private cheatsheet and jump to heading."
  (interactive)
  (doom-completing-read-org-headings
   "Cheatsheet: " (list (concat doom-private-dir "cheatsheet.org"))
   2 nil initial-input))
#+END_SRC
