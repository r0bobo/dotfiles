#compdef _doom doom


function _doom {
    local -a commands

    _arguments -C \
        "(-h --help)"{-h,--help}"[Same as help command]" \
        "(-d --debug)"{-d,--debug}"[Turns on doom-debug-p (and debug-on-error)]" \
        "(-y --yes)"{-y,--yes}"[Auto-accept all confirmation prompts]" \
        "1: :->cmnds" \
        "*::arg:->args"


    case $state in
        cmnds)
            commands=(
                "help:Describe a command or list them all."
                "install:Installs and sets up Doom Emacs for the first time."
                "sync:Synchronize your config with Doom Emacs."
                "env:Creates or regenerates your envvars file."
                "upgrade:Updates Doom and packages."
                "build:Byte-compiles & symlinks installed packages."
                "purge:Deletes orphaned packages & repos, and compacts them."
                "doctor:Diagnoses common issues on your system."
                "info:Output system info in markdown for bug reports."
                "version:Show version information for Doom & Emacs."
                "compile:Byte-compiles your config or selected modules."
                "clean:Delete all *.elc files."
                "run:Run Doom Emacs from bin/doom's parent directory."
            )
            _describe "command" commands
            ;;
    esac

    case "$words[1]" in
        help)
            _doom_help
        ;;
        install)
            _doom_install
        ;;
        sync)
            _doom_sync
        ;;
        env)
            _doom_env
        ;;
        upgrade)
            _doom_upgrade
        ;;
        build)
            _doom_build
        ;;
        purge)
            _doom_purge
        ;;
        doctor)
        ;;
        info)
            _doom_info
        ;;
        version)
        ;;
        compile)
            _doom_compile
        ;;
        clean)
        ;;
        run)
        ;;
    esac

}

function _doom_help {
    _arguments \
        '1: :->cmnds'

    case $state in
        cmnds)
            commands=(
                "help"
                "install"
                "sync"
                "env"
                "upgrade"
                "build"
                "purge"
                "doctor"
                "info"
                "version"
                "compile"
                "clean"
                "run"
            )
            _describe "command" commands
            ;;
    esac
}

function _doom_install {
    _arguments \
        "--no-config[Don't create DOOMDIR or dummy files therein]" \
        "--no-env[Don't generate an envvars file (see 'doom help env')]" \
        "--no-install[Don't auto-install packages]" \
        "--no-fonts[Don't install (or prompt to install) all-the-icons fonts]"
}

function _doom_sync {
    _arguments \
        "-e[Don't regenerate the envvar file]" \
        "-c[Don't recompile config]" \
        "-u[Update installed packages after syncing]" \
        "(-p --prune)"{-p,--prune}"[Purge orphaned package repos & regraft them]"
}

function _doom_env {
    _arguments \
        "(-a --allow)"{-a,--allow}"[An additive envvar whitelist regexp]" \
        "(-r --reject)"{-r,--reject}"[An additive envvar blacklist regexp]" \
        "-A[Blacklist everything but REGEXP]" \
        "-R[Whitelist everything but REGEXP]" \
        "(-c --clear)"{-c,--clear}"[Clear and delete your envvar file]" \
        "-o[Generate the envvar file at PATH]"
}

function _doom_upgrade {
    _arguments \
      "(-f --force)"{-f,--force}"[Discard local changes to Doom and packages, and upgrade anyway]" \
      "(-p --packages)"{-p,--packages}"[Only upgrade packages, not Doom]"
}

function _doom_build {
    _arguments \
        "-r[Only rebuild packages that need rebuilding]"
}

function _doom_purge {
    _arguments \
        "(-b --no-builds)"{-b,--no-builds}"[Don't purge unneeded (built) packages]" \
        "(-p --no-elpa)"{-p,--no-elpa}"[Don't purge ELPA packages]" \
        "(-r --no-repos)"{-r,--no-repos}"[Don't purge unused straight repos]" \
        "(-g --regraft)"{-g,--regraft}"[Regraft git repos (ie. compact them)]"
}

function _doom_info {
    _arguments \
        "--json[Output json]" \
        "--md[Output markdown]" \
        "--lisp[Output Emacs lisp]"
}

function _doom_compile {
    _arguments \
          "(-r --recompile)"{-r,--recompile} \
          "(-c --core)"{-c,--core} \
          "(-p --private)"{-p,--private} \
          "(-v --verbose)"{-v,--verbose}
}
